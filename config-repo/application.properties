# Global configuration
spring.devtools.restart.enabled=true
# Messages configuration
spring.messages.always-use-message-format=false
spring.messages.basename=messages, config.i18n.messages
spring.messages.cache-duration=
spring.messages.encoding=UTF-8
spring.messages.fallback-to-system-locale=true
spring.messages.use-code-as-default-message=false
# CORS configuration
management.endpoints.web.cors.allowed-mapping='[/api/**]'
# Liste d'origines séparées par des virgules à autoriser. '*' autorise toutes les origines.
# Lorsqu?elle n?est pas définie, la prise en charge CORS est désactivée.
management.endpoints.web.cors.allowed-origins="http://localhost:4200,http://localhost:8080,https://${domain:localhost}"
# Liste de méthodes séparées par des virgules à autoriser. '*' autorise toutes les méthodes.
management.endpoints.web.cors.allowed-methods="OPTIONS,GET,POST,PUT,DELETE,PATCH"
# Liste d'en-têtes séparés par des virgules à autoriser dans une requête. '*' autorise tous les en-têtes.
management.endpoints.web.cors.allowed-headers="Authorization,Content-Type"
# Définissez si les informations d'identification sont prises en charge. Lorsqu?elles ne sont pas définies,
# les informations d?identification ne sont pas prises en charge.
management.endpoints.web.cors.allowed-credentials=true
# Liste d'en-têtes séparés par des virgules à inclure dans une réponse.
management.endpoints.web.cors.exposed-headers="X-Get-Header"
# Combien de temps, en secondes, la réponse à une demande de pré-vol peut être mise en cache par les clients.
management.endpoints.web.cors.max-age=1800
# Gateway configuration
spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lower-case-service-id=true
spring.cloud.loadbalancer.ribbon.enabled=false
# Consul configuration
spring.cloud.consul.discovery.instanceId=${spring.application.name}-${server.port}-${random.int[1,99]}
spring.cloud.consul.host=localhost
spring.cloud.consul.port=8500
spring.cloud.consul.discovery.prefer-ip-address=true
spring.cloud.consul.config.enabled=false
# OpenFein configuration
spring.cloud.openfeign.circuitbreaker.enabled=true
# RabbitMQ configuration
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=rabbitmq
spring.rabbitmq.password=2+2Font4
# MVC configuration
#spring.mvc.view.prefix=/WEB-INF/views/pages/
#spring.mvc.view.suffix=.jsp
# Swagger configuration
springdoc.show-actuator=true
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
springdoc.swagger-ui.tryItOutEnabled=true
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha
springdoc.swagger-ui.filter=true
# Microservice configuration
feign.client.config.default.loggerLevel=full
management.endpoints.web.exposure.include=*
# File download reporting configuration
app.file.upload-dir=./uploads/files
app.file.storage.mapping=file:~/saasCommerce/file/uploads/
# Tomcat configuration
server.compression.enabled=true
server.servlet.session.cookie.http-only=true
###### JWT Properties ######
app.jwt.secret=74c9e258e0740bab507570dfb62cffe6
app.jwt.expiration=86400000
# Initialize the datasource with available DDL and DML scripts
spring.datasource.initialization-mode=always
# Jackson Properties
spring.jackson.serialization.WRITE_DATES_AS_TIMESTAMPS=false
spring.jackson.time-zone=UTC
spring.jackson.serialization.indent-output=true
# Log level configuration
# Spring Boot supports all logger levels such as TRACEâ, DEBUG, INFOâ€, WARNâ, ERROR, FATAL, OFF.
logging.level.root=ERROR
logging.level.com.dexproject=INFO
logging.level.org.springframework.boot.autoconfigure.h2=INFO
logging.level.org.springframework.boot.web.embedded.tomcat=INFO
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type=TRACE
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.web=DEBUG
## Spring Profiles
spring.profiles.active=prod
###### Email Properties ######
#smtp mail properties
################### GMail Configuration ##########################
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=vnlangessama@gmail.com
spring.mail.password=lafxellznwtzknhd
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.transport.protocol=smtps
spring.mail.properties.mail.smtps.auth=true
spring.mail.properties.mail.smtps.starttls.enable=true
spring.mail.properties.mail.smtps.timeout=8000
# TLS , port 587
spring.mail.properties.mail.smtp.starttls.enable=true
# SSL, post 465
#spring.mail.properties.mail.smtp.socketFactory.port=465
#spring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory
# Social login provider props
spring.security.oauth2.client.registration.google.clientId=<your-client-id>
spring.security.oauth2.client.registration.google.clientSecret=<your-client-secret>
spring.security.oauth2.client.registration.facebook.clientId=<your-client-id>
spring.security.oauth2.client.registration.facebook.clientSecret=<your-client-secret>
spring.security.oauth2.client.provider.facebook.user-info-uri=https://graph.facebook.com/me?fields=id,name,email,picture
spring.security.oauth2.client.registration.github.clientId=<your-client-id>
spring.security.oauth2.client.registration.github.clientSecret=<your-client-secret>
spring.security.oauth2.client.registration.linkedin.clientId=<your-client-id>
spring.security.oauth2.client.registration.linkedin.clientSecret=<your-client-secret>
spring.security.oauth2.client.registration.linkedin.client-authentication-method=post
spring.security.oauth2.client.registration.linkedin.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.linkedin.scope=r_liteprofile, r_emailaddress
spring.security.oauth2.client.registration.linkedin.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
spring.security.oauth2.client.registration.linkedin.client-name=Linkedin
spring.security.oauth2.client.registration.linkedin.provider=linkedin
spring.security.oauth2.client.provider.linkedin.authorization-uri=https://www.linkedin.com/oauth/v2/authorization
spring.security.oauth2.client.provider.linkedin.token-uri=https://www.linkedin.com/oauth/v2/accessToken
spring.security.oauth2.client.provider.linkedin.user-info-uri=https://api.linkedin.com/v2/me
spring.security.oauth2.client.provider.linkedin.user-name-attribute=id
linkedin.email.address.uri=https://api.linkedin.com/v2/emailAddress?q=members&projection=(elements*(handle~))
# After successfully authenticating with the OAuth2 Provider,
# we'll be generating an auth token for the user and sending the token to the
# redirectUri mentioned by the frontend client in the /oauth2/authorization request.
# We're not using cookies because they won't work well in mobile clients.
app.oauth2.authorizedRedirectUris=https://localhost:4200/api/oauth2/redirect,myandroidapp:///api/oauth2/redirect,myiosapp:///api/oauth2/redirect
app.cors.allowedOrigins=http://localhost:4200,http://localhost:8080
# Utiliser le bac a sable pour les tests et en direct pour la production
paypal.mode=sandbox
paypal.client.id=AYSq3RDGsmBLJE-otTkBtM-jBRd1TCQwFf9RGfwddNXWz0uFU9ztymylOhRS
paypal.client.secret=EGnHDxD_qRPdaLdZz8iCr8N7_MzF-YHPTkjs6NKYQvQSBngp4PTTVWkPZRbL
